> This file contains the generic templates to use for properties of particular types.

# welcome
- Welcome!

# name(property)
- @{template(concat(property, 'Name'))}

# value(property, val)
- @{template(property, val)}

# enumEntityValue(property, val)
- @{template(concat(property, 'Entity'), val)}

# requiredProperties
- IF: @{count(dialogClass.schema.required) > 0}
- Required properties include: @{join(foreach(dialogClass.schema.required, property, name(property)), ',')}\n
- ELSE:
- 

> TODO: We should enable this when where/foreach works over objects.
# optionalProperties
-
> - IF: @{add(count(dialogClass.schema.required),count(dialogClass.schema.$expectedOnly)) < count(dialogClass.schema.properties)}
> - Optional properties include: @{join(foreach(where(dialogClass.schema.properties, property, !contains(dialogClass.schema.required, property) && !contains(dialogClass.schema.$expectedOnly, property)), property, name(property)), ', ')}\n
> - ELSE:
> - 

# possibleValues(property)
- @{foreach(dialogClass.schema.properties[property].enum, enum, value(property, enum))}

# cancel
- Do you want to end the conversation? (yes/no)

# confirmChangeProperty(property)
- IF: @{dialog[property]}
- Do you want to change the value of @{toLower(property)}? (yes or no)
- ELSE: 
- Do you want to add a value for @{toLower(property)}? (yes or no)

# confirmChange
- Is there any property you want to change? (no or the property name)

# chooseProperty
- Which property do you want to change?

# notUnderstood
- Sorry, I do not understand @{join(foreach(turn.unrecognizedtext, chunk, concat("'", chunk, "'")), ' or ')}\n

> TODO: Would be good to split out all the component pieces, i.e. help, cancel, confirmation into their own files
[library-PROPERTYName.lg]
[library-ConfirmationEntity.lg]