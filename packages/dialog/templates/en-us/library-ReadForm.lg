# readForm(name)
[Activity
    Attachments=@{json(formCard(name))}
]

>>> To generate text instead of card, use this
# formText
- @{join(foreach(dialog.requiredProperties, property, textProperty(property)), ', ')}

# textProperty(property)
- IF: @{dialog[property] == null}
- The value of @{toLower(property)} is empty.
- ELSEIF: @{dialogClass.schema.properties[property].required}
- The value of @{toLower(property)} is @{join(foreach(dialogClass.schema.properties[property].required, subproperty, subFact(property, subproperty)), ' ')}.
- ELSE:
- The value of @{toLower(property)} is @{dialog[property]}.

# formCard(name)
-```
{
    "type": "AdaptiveCard",
    "version": "1.0",
    "body": [
        {
            "type": "TextBlock",
            "text": "@{name}",
            "size": "large"
        },
        {
            "type": "FactSet",
            "facts": [@{requiredFacts()}]
        }
    ],
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json"
}
```


> TODO: It would be nice to able to include bound optional properties as well.  
> Once we have support in foreach for objects we can expand this.
# requiredFacts
- @{join(foreach(dialog.requiredProperties, property, fact(property)), ', ')}

# fact(property)
- IF:  @{dialogClass.schema.properties[property].required}
- {"title": "@{name(property)}", "value": "@{join(foreach(dialogClass.schema.properties[property].required, subproperty, subFact(property, subproperty)), ' ')}"}
- ELSE: 
- {"title": "@{name(property)}", "value": "@{value(property, dialog[property])}"}

# subFact(property, subproperty)
- @{dialog[property][subproperty]}

[library.lg]