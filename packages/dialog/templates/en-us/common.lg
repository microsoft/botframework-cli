> This file contains the generic templates to use for properties of particular types.

# welcome
- Welcome!

# name(property)
- @{template(concat(property, 'Name'))}

# value(property, val)
- @{template(property, val)}

# enumEntityValue(property, val)
- @{template(concat(property, 'Entity'), val)}

>>> Ask prompts <<<

> TODO: We should look at the schema and if a few items list them or do cards or..
# askEnum(property)
- ```
@{askHelp()}
Which value do you want for @{name(property)}?
```

# askNumber(property)
- IF: @{dialogClass.schema.properties[property].minimum && dialogClass.schema.properties[property].maximum}
- Enter a number for @{name(property)} between @{dialogClass.schema.properties[property].minimum} and @{dialogClass.schema.properties[property].maximum}
- ELSE:
- Enter a number for @{name(property)}

# askString(property)
- ```
@{askHelp()}
Enter a value for @{name(property)}
```

# askHelp
- IF: @{$retries > 0 && $lastIntent != 'Help'}
- @{join(foreach($expectedProperties, expected, help1(expected)), '\n')}
- ELSE:
- 

# help(property)
- IF: @{property}
- @{help1(property)}
- ELSEIF: @{$expectedProperties}
- @{join(foreach($expectedProperties, expected, help1(expected)), '\n')}
- ELSE:
- @{requiredProperties()}\n@{optionalProperties()}\nYou can find out about a specific property by doing 'help <property>'.

# help1(property)
- IF: @{dialogClass.schema.properties[property].enum}
- Possible values for @{name(property)} include: \[@{join(possibleValues(property), ', ')}\]
- ELSEIF: @{dialogClass.schema.properties[property].type == 'number'}
- Expect a number for @{name(property)}
- ELSEIF: @{dialogClass.schema.properties[property].type == 'string'}
- Enter any string for @{name(property)}
- ELSE:
- No help available.

# requiredProperties
- IF: @{count(dialogClass.schema.required) > 0}
- Required properties include: @{join(foreach(dialogClass.schema.required, property, name(property)), ',')}\n
- ELSE:
- 

> TODO: We should enable this when where/foreach works over objects.
# optionalProperties
-
> - IF: @{add(count(dialogClass.schema.required),count(dialogClass.schema.$expectedOnly)) < count(dialogClass.schema.properties)}
> - Optional properties include: @{join(foreach(where(dialogClass.schema.properties, property, !contains(dialogClass.schema.required, property) && !contains(dialogClass.schema.$expectedOnly, property)), property, name(property)), ', ')}\n
> - ELSE:
> - 

# possibleValues(property)
- @{foreach(dialogClass.schema.properties[property].enum, enum, value(property, enum))}

# chooseEnumEntity(property)
- ```
@{askHelp()}
Please choose a value for @{name(property)} from \[@{join(foreach(turn.dialogEvent.value.entity.value, val, enumEntityValue(property, val)), ', ')}\]
```

# cancel
- Do you want to end the conversation? (yes/no)

# setObjectPropertyMessage(property, val)
- IF: @{contains($expectedProperties, property)}
- 
- ELSEIF: @{dialog[property]} 
- @{name(property)} is changed from @{join(foreach(dialogClass.schema.properties[property].required, subproperty, subFact(property, subproperty)), ' ')} to @{val}.
- ELSE: 
- @{name(property)} is set as @{val}.

# setPropertyMessage(property, val)
- IF: @{contains($expectedProperties, property)}
- 
- ELSE:
- @{setUnexpectedPropertyMessage(property, val)}

# setUnexpectedPropertyMessage(property, val)
- IF:@{dialog[property]}
- @{unexpectedPropertyChange(property, val, dialog[property])}
- ELSE:
- @{unexpectedPropertySet(property, val)}

# unexpectedPropertySet(property, val)
- @{name(property)} is set as @{value(property, val)}.

# unexpectedPropertyChange(property, val, oldVal)
- @{name(property)} is changed from @{value(property, oldVal)} to @{value(property, val)}.

# chooseProperties
- Did you mean @{join(foreach(turn.dialogevent.value, choice, choosePropertyEntity(choice)), " or ")}

# choosePropertyEntity(property)
- "@{property.entity.text}" as @{name(property.property)}

# readForm
[Activity
    Attachments=@{json(formCard())}
]

>>> To generate text instead of card, use this
# formText
- @{join(foreach(dialog.requiredProperties, property, textProperty(property)), ', ')}

# textProperty(property)
- IF: @{dialog[property] == null}
- The value of @{toLower(property)} is empty.
- ELSEIF: @{dialogClass.schema.properties[property].required}
- The value of @{toLower(property)} is @{join(foreach(dialogClass.schema.properties[property].required, subproperty, subFact(property, subproperty)), ' ')}.
- ELSE:
- The value of @{toLower(property)} is @{dialog[property]}.

# confirmChangeProperty(property)
- IF: @{dialog[property]}
- Do you want to change the value of @{toLower(property)}? (yes or no)
- ELSE: 
- Do you want to add a value for @{toLower(property)}? (yes or no)

# formCard
-```
{
    "type": "AdaptiveCard",
    "version": "1.0",
    "body": [
        {
            "type": "TextBlock",
            "text": "sandwich",
            "size": "large"
        },
        {
            "type": "FactSet",
            "facts": [@{requiredFacts()}]
        }
    ],
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json"
}
```

> TODO: It would be nice to able to include bound optional properties as well.  
> Once we have support in foreach for objects we can expand this.
# requiredFacts
- @{join(foreach(dialog.requiredProperties, property, fact(property)), ', ')}

# fact(property)
- IF:  @{dialogClass.schema.properties[property].required}
- {"title": "@{name(property)}", "value": "@{join(foreach(dialogClass.schema.properties[property].required, subproperty, subFact(property, subproperty)), ' ')}"}
- ELSE: 
- {"title": "@{name(property)}", "value": "@{value(property, dialog[property])}"}

# subFact(property, subproperty)
- @{dialog[property][subproperty]}

# confirmChange
- Is there any property you want to change? (no or the property name)

# chooseProperty
- Which property do you want to change?

# notUnderstood
- Sorry, I do not understand @{join(foreach(turn.unrecognizedtext, chunk, concat("'", chunk, "'")), ' or ')}\n

# CompleteConfirmationName
- confirmation

# CompleteConfirmation(value)
- @{Confirmation(value)}

# PropertyToChangeName
- property

# PropertyToChange(value)
- @{PROPERTYName(value)}

> TODO: Would be good to split out all the component pieces, i.e. help, cancel, confirmation into their own files
[PROPERTYName.lg]
[Confirmation.lg]
