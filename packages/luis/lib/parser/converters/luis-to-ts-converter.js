"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parse_multi_platform_luis_1 = require("../luisfile/parse-multi-platform-luis");
const writer_1 = require("./helpers/writer");
var LuisToTsConverter;
(function (LuisToTsConverter) {
    async function writeFromLuisJson(luisJson, className, outPath) {
        const app = parse_multi_platform_luis_1.ParseMultiPlatformLuis.fromLuisApp(luisJson);
        let writer = new writer_1.Writer();
        writer.indentSize = 2;
        await writer.setOutputStream(outPath);
        header(writer);
        intents(app, writer);
        entities(app, writer);
        classInterface(className, writer);
        await writer.closeOutputStream();
    }
    LuisToTsConverter.writeFromLuisJson = writeFromLuisJson;
    function header(writer) {
        writer.writeLine([
            '/**',
            ' * <auto-generated>',
            ' * Code generated by luis:generate:ts',
            ' * Tool github: https://github.com/microsoft/botframwork-cli',
            ' * Changes may cause incorrect behavior and will be lost if the code is',
            ' * regenerated.',
            ' * </auto-generated>',
            ' */',
            "import {DateTimeSpec, GeographyV2, InstanceData, IntentData, NumberWithUnits, OrdinalV2} from 'botbuilder-ai'"
        ]);
    }
    function intents(app, writer) {
        writer.writeLine();
        writer.writeLineIndented('export interface GeneratedIntents {');
        writer.increaseIndentation();
        app.intents.forEach((intent) => {
            writer.writeLineIndented(`${parse_multi_platform_luis_1.ParseMultiPlatformLuis.normalizeName(intent)}: IntentData`);
        });
        writer.decreaseIndentation();
        writer.writeLine('}');
    }
    function entities(app, writer) {
        // Composite instance and data
        app.composites.forEach((composite) => {
            let name = parse_multi_platform_luis_1.ParseMultiPlatformLuis.normalizeName(composite.compositeName);
            writer.writeLine();
            writer.writeLineIndented(`export interface GeneratedInstance${name} {`);
            writer.increaseIndentation();
            composite.attributes.forEach((attribute) => {
                writer.writeLineIndented(`${parse_multi_platform_luis_1.ParseMultiPlatformLuis.jsonPropertyName(attribute)}?: InstanceData[]`);
            });
            writer.decreaseIndentation();
            writer.writeLineIndented('}');
            writer.writeLineIndented(`export interface ${name} {`);
            writer.increaseIndentation();
            composite.attributes.forEach(attribute => {
                writer.writeLineIndented(getEntityWithType(attribute, isList(attribute, app)));
            });
            writer.writeLineIndented(`$instance?: GeneratedInstance${name}`);
            writer.decreaseIndentation();
            writer.writeLineIndented('}');
        });
        writer.writeLine();
        // Entity instance
        writer.writeLineIndented('export interface GeneratedInstance {');
        writer.increaseIndentation();
        app.getInstancesList().forEach(instance => {
            writer.writeLineIndented(`${parse_multi_platform_luis_1.ParseMultiPlatformLuis.jsonPropertyName(instance)}?: InstanceData[]`);
        });
        writer.decreaseIndentation();
        writer.writeLineIndented('}');
        // Entities
        writer.writeLine();
        writer.writeLineIndented('export interface GeneratedEntities {');
        writer.increaseIndentation();
        writeEntityGroup(app.simpleEntities, '// Simple entities', writer);
        writer.writeLineIndented('// Built-in entities');
        app.builtInEntities.forEach(builtInEntity => {
            builtInEntity.forEach(entity => {
                writer.writeLineIndented(getEntityWithType(entity));
            });
        });
        writer.writeLine();
        writeEntityGroup(app.listEntities, '// Lists', writer, true);
        writeEntityGroup(app.regexEntities, '// Regex entities', writer);
        writeEntityGroup(app.patternEntities, '// Pattern.any', writer);
        // Composites
        writer.writeLineIndented('// Composites');
        app.composites.forEach(composite => {
            writer.writeLineIndented(`${composite.compositeName}?: ${composite.compositeName}[]`);
        });
        writer.writeLineIndented('$instance: GeneratedInstance');
        writer.decreaseIndentation();
        writer.writeLineIndented('}');
    }
    function classInterface(className, writer) {
        writer.writeLine();
        writer.writeLineIndented(`export interface ${className} {`);
        writer.increaseIndentation();
        writer.writeLineIndented([
            'text: string',
            'alteredText?: string',
            'intents: GeneratedIntents',
            'entities: GeneratedEntities',
            '[propName: string]: any'
        ]);
        writer.decreaseIndentation();
        writer.writeLineIndented('}');
    }
    function writeEntityGroup(entityGroup, description, writer, isListType = false) {
        writer.writeLineIndented(description);
        entityGroup.forEach(entity => {
            writer.writeLineIndented(getEntityWithType(entity, isListType));
        });
        writer.writeLine();
    }
    function isList(entityName, app) {
        return app.listEntities.includes(entityName);
    }
    function getEntityWithType(entityName, isListType = false) {
        let result = '';
        switch (isListType ? 'list' : entityName) {
            case 'age':
            case 'dimension':
            case 'money':
            case 'temperature':
                result = '?: NumberWithUnits[]';
                break;
            case 'geographyV2':
                result = '?: GeographyV2[]';
                break;
            case 'ordinalV2':
                result = '?: OrdinalV2[]';
                break;
            case 'number':
            case 'ordinal':
            case 'percentage':
                result = '?: number[]';
                break;
            case 'datetimeV2':
                result = '?: DateTimeSpec[]';
                break;
            case 'list':
                result = '?: string[][]';
                break;
            default:
                result = '?: string[]';
        }
        return parse_multi_platform_luis_1.ParseMultiPlatformLuis.jsonPropertyName(entityName) + result;
    }
})(LuisToTsConverter = exports.LuisToTsConverter || (exports.LuisToTsConverter = {}));
